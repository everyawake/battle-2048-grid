{"version":3,"sources":["serviceWorker.ts","theme.tsx","pages/landing/styled.tsx","pages/landing/index.tsx","pages/single/styled.tsx","gameEngine/render/styled.tsx","gameEngine/helpers/rangeRand.tsx","gameEngine/helpers/randomRGB.tsx","gameEngine/engine/index.tsx","gameEngine/render/index.tsx","pages/single/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","mainTheme","Wrapper","styled","div","MenuBox","Link","attrs","type","Landing","to","React","CanvasBoard","canvas","props","width","toFixed","height","rangeRand","min","max","Math","floor","random","randomRGB","r","g","b","Board2048Engine","currentBoardSize","generateBlockCountPerMove","board","isInitialized","startValue","maxBoardSearchCount","onBoardChange","onGameEnd","getBoard","newBlockAtRandomPosition","Error","i","getEmptyRandomPosition","then","result","x","y","console","log","value","catch","Promise","resolve","reject","tryCount","time","isEmpty","timeEnd","options","boardSize","this","round","pow","Array","fill","direction","Board2048","state","canvasWidth","canvasHeight","engine","refCanvasBoard","canvasContext","getRelativeBlockSize","mem","param","drawRect","params","ctx","posX","posY","fillStyle","fillRect","renderBoard","block","initializeGameEngine","initializeBoard","handleBoardChange","handleGameEnd","info","initializeCanvas","current","getContext","setState","registerKeyboardInput","error","addEventListener","debounceKeyDown","alert","handleArrowKey","e","keyCode","move","throttle","ref","SingleMode","GlobalStyle","createGlobalStyle","history","createBrowserHistory","ReactDOM","render","theme","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8471b47.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const mainTheme = {\n  primaryColor: \"#a5d6a7\",\n  primaryLightColor: \"#d7ffd9\",\n  primaryDarkColor: \"#75a478\",\n  primaryTextColor: \"#000000\",\n  backgroundGreyColor: \"#e8e8e8\",\n  backgroundWhiteColor: \"#fff\",\n};\n","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { mainTheme } from \"../../theme\";\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  font-size: 1rem;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  background-color: ${mainTheme.backgroundGreyColor};\n`;\n\nexport const MenuBox = styled(Link).attrs({ type: \"button\" })`\n  width: 32rem;\n  padding: 1.2rem;\n  background-color: ${mainTheme.backgroundWhiteColor};\n  border: 1px solid ${mainTheme.backgroundGreyColor};\n  border-radius: 0.8rem;\n  text-align: center;\n  text-decoration: none;\n  color: ${mainTheme.primaryTextColor};\n\n  &:focus {\n    outline: none;\n  }\n\n  &:hover {\n    background-color: ${mainTheme.primaryLightColor};\n    box-shadow: 0.1rem 0.1rem 0.3rem 0 rgba(0, 0, 0, 0.75);\n  }\n`;\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Wrapper, MenuBox } from \"./styled\";\n\ninterface IProps extends RouteComponentProps {}\n\nexport default class Landing extends React.PureComponent<IProps> {\n  public render() {\n    return (\n      <Wrapper>\n        <MenuBox to=\"/single\">\n          <span>Single Play</span>\n        </MenuBox>\n      </Wrapper>\n    );\n  }\n}\n","import styled from \"styled-components\";\nimport { mainTheme } from \"../../theme\";\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  font-size: 1rem;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  background-color: ${mainTheme.backgroundGreyColor};\n`;\n","import styled from \"styled-components\";\nimport { mainTheme } from \"../../theme\";\n\nexport const CanvasBoard = styled.canvas<{ width: number; height: number }>`\n  width: ${props => `${(props.width / 10).toFixed(1)}rem`};\n  height: ${props => `${(props.height / 10).toFixed(1)}rem`};\n  background-color: ${mainTheme.backgroundWhiteColor};\n`;\n","export default function rangeRand(min: number, max: number) {\n  return Math.floor(Math.random() * (+max - +min)) + +min;\n}\n","import rangeRand from \"./rangeRand\";\n\nconst randomRGB = () => {\n  return {\n    r: rangeRand(0, 255),\n    g: rangeRand(0, 255),\n    b: rangeRand(0, 255),\n  };\n};\n\nexport default randomRGB;\n","import { fill } from \"lodash\";\n\nimport rangeRand from \"../helpers/rangeRand\";\n\nexport interface IBlock {\n  value: number;\n}\nexport type Board = Array<Array<IBlock>>;\nexport type Direction = \"left\" | \"right\" | \"up\" | \"down\";\nexport type BoardChangeHandler = (board: Board) => void;\n\nexport default class Board2048Engine {\n  private currentBoardSize = 0;\n  private generateBlockCountPerMove = 1;\n  private board: Board = [];\n  private isInitialized = false;\n  private startValue = 2;\n  private maxBoardSearchCount = 4;\n  private onBoardChange: BoardChangeHandler = () => {};\n  private onGameEnd: VoidFunction = () => {};\n\n  public initializeBoard(options: {\n    boardSize: number;\n    onBoardChange: BoardChangeHandler;\n    onGameEnd: VoidFunction;\n  }) {\n    const { boardSize, onBoardChange, onGameEnd } = options;\n    this.currentBoardSize = boardSize;\n    this.generateBlockCountPerMove = Math.round(boardSize / 2);\n    this.maxBoardSearchCount = Math.pow(boardSize, boardSize);\n\n    this.onBoardChange = onBoardChange;\n    this.onGameEnd = onGameEnd;\n\n    this.board = new Array(boardSize);\n    for (let i = 0; i < boardSize; i++) {\n      this.board[i] = fill(new Array(boardSize), { value: 0 });\n    }\n    this.isInitialized = true;\n    this.newBlockAtRandomPosition();\n  }\n\n  public getBoard = () => this.board;\n\n  public move(direction: Direction) {\n    console.log(\"!!!!! Direction: \", direction);\n    this.newBlockAtRandomPosition();\n  }\n\n  private readonly newBlockAtRandomPosition = () => {\n    if (!this.isInitialized) {\n      throw new Error(\"[❌] error: Must be initialize before use!\");\n    }\n    for (let i = 0; i < this.generateBlockCountPerMove; i++) {\n      this.getEmptyRandomPosition()\n        .then(result => {\n          const { x, y } = result;\n          console.log(`!!!! {x,y}: {${x}, ${y}}`);\n          this.board[x][y] = { value: this.startValue };\n          this.onBoardChange(this.board);\n        })\n        .catch(() => {\n          console.log(\"!!! no space\");\n          this.onGameEnd(); // temporary\n        });\n    }\n  };\n\n  private readonly getEmptyRandomPosition = (): Promise<{\n    x: number;\n    y: number;\n  }> =>\n    new Promise((resolve, reject) => {\n      let x, y;\n      let tryCount = 1;\n\n      console.time(\"getEmptyRandomPosition\");\n      do {\n        if (tryCount === this.maxBoardSearchCount) {\n          x = null;\n          y = null;\n          break;\n        }\n        x = rangeRand(0, this.currentBoardSize);\n        y = rangeRand(0, this.currentBoardSize);\n        tryCount++;\n      } while (!this.isEmpty(x, y));\n      console.timeEnd(\"getEmptyRandomPosition\");\n\n      if (x !== null && y !== null) {\n        resolve({\n          x,\n          y,\n        });\n      } else {\n        reject();\n      }\n    });\n\n  private readonly isEmpty = (x: number, y: number) => {\n    return this.board[x][y].value === 0;\n  };\n}\n","import * as React from \"react\";\nimport throttle from \"lodash/throttle\";\nimport mem from \"mem\";\nimport { CanvasBoard } from \"./styled\";\nimport randomRGB from \"../helpers/randomRGB\";\nimport Board2048Engine, {\n  Direction,\n  Board as GameBoard,\n  BoardChangeHandler,\n  IBlock,\n} from \"../engine\";\n\n// const BLOCK_MARGIN = 8;\n\ninterface IProps {\n  width: number;\n  height: number;\n  boardSize: number;\n}\n\ninterface IState {\n  canvasWidth: number;\n  canvasHeight: number;\n}\n\nexport default class Board2048 extends React.PureComponent<IProps, IState> {\n  public state: IState = {\n    canvasWidth: 0,\n    canvasHeight: 0,\n  };\n\n  private readonly engine = new Board2048Engine();\n  private readonly refCanvasBoard = React.createRef<HTMLCanvasElement>();\n  private canvasContext: CanvasRenderingContext2D | null = null;\n\n  public componentDidMount() {\n    this.initializeGameEngine();\n    this.initializeCanvas();\n  }\n\n  public render() {\n    const { width, height } = this.props;\n    return (\n      <CanvasBoard width={width} height={height} ref={this.refCanvasBoard} />\n    );\n  }\n\n  private readonly getRelativeBlockSize = mem(\n    (param: {\n      canvasWidth: number;\n      canvasHeight: number;\n      boardSize: number;\n    }) => {\n      const { canvasWidth, canvasHeight, boardSize } = param;\n      return {\n        width: canvasWidth / boardSize,\n        height: canvasHeight / boardSize,\n      };\n    },\n  );\n\n  private readonly drawRect = (params: {\n    posX: number;\n    posY: number;\n    value: IBlock;\n  }) => {\n    const ctx = this.canvasContext;\n    const { width, height } = this.getRelativeBlockSize({\n      ...this.state,\n      boardSize: this.props.boardSize,\n    });\n    if (ctx) {\n      const { posX, posY } = params;\n      const { r, g, b } = randomRGB();\n      ctx.fillStyle = `rgba(${r}, ${g}, ${b}, 0.8)`;\n      ctx.fillRect(posX * width, posY * height, width, height);\n    }\n  };\n\n  private readonly renderBoard = (board: GameBoard) => {\n    const { boardSize } = this.props;\n    for (let x = 0; x < boardSize; x++) {\n      for (let y = 0; y < boardSize; y++) {\n        const block = board[x][y];\n        if (block.value) {\n          this.drawRect({\n            posX: x,\n            posY: y,\n            value: block,\n          });\n        }\n      }\n    }\n  };\n\n  private readonly initializeGameEngine = () => {\n    const { boardSize } = this.props;\n    this.engine.initializeBoard({\n      boardSize,\n      onBoardChange: this.handleBoardChange,\n      onGameEnd: this.handleGameEnd,\n    });\n    console.info(\"[✔️] Success to initialize Game engine\");\n  };\n\n  private readonly initializeCanvas = () => {\n    const canvas = this.refCanvasBoard.current;\n    if (canvas) {\n      this.canvasContext = canvas.getContext(\"2d\");\n      if (this.canvasContext) {\n        console.info(\"[✔️] Success to initialize canvas\");\n\n        this.setState({\n          canvasWidth: canvas.width,\n          canvasHeight: canvas.height,\n        });\n        this.renderBoard(this.engine.getBoard());\n\n        this.registerKeyboardInput();\n      }\n    } else {\n      console.error(\"[❌] Failed to initialize canvas\");\n    }\n  };\n\n  private readonly registerKeyboardInput = () => {\n    if (window) {\n      window.addEventListener(\"keydown\", this.debounceKeyDown);\n      console.info(\"[✔️] Success to register keyboard input\");\n    } else {\n      console.error(\"[❌] Failed to register keyboard input\");\n    }\n  };\n\n  private readonly handleBoardChange: BoardChangeHandler = board => {\n    console.log(\"!!!! handleBoardChange\", board);\n    this.renderBoard(board);\n  };\n\n  private readonly handleGameEnd = () => {\n    alert(\" - GAME END - \");\n  };\n\n  private readonly handleArrowKey: React.EventHandler<any> = e => {\n    let direction: Direction | null = null;\n    switch (e.keyCode) {\n      // left\n      case 37: {\n        console.log(\"KeyInput: left arrow\");\n        direction = \"left\";\n        break;\n      }\n\n      // up\n      case 38: {\n        console.log(\"KeyInput: up arrow\");\n        direction = \"up\";\n        break;\n      }\n\n      // right\n      case 39: {\n        console.log(\"KeyInput: right arrow\");\n        direction = \"right\";\n        break;\n      }\n\n      // down\n      case 40: {\n        console.log(\"KeyInput: down arrow\");\n        direction = \"down\";\n        break;\n      }\n    }\n    if (direction) {\n      this.engine.move(direction);\n    }\n  };\n  private readonly debounceKeyDown = throttle(this.handleArrowKey, 150);\n}\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Wrapper } from \"./styled\";\nimport Board2048 from \"../../gameEngine/render/index\";\n\ninterface IProps extends RouteComponentProps {}\n\nexport default class SingleMode extends React.PureComponent<IProps> {\n  public render() {\n    return (\n      <Wrapper>\n        <title>\n          <h1>Single play mode</h1>\n        </title>\n        <div>\n          <Board2048 width={500} height={500} boardSize={4} />\n        </div>\n      </Wrapper>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { Router, Switch, Route } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Landing from \"./pages/landing\";\nimport SingleMode from \"./pages/single\";\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    margin: 0;\n    padding: 0;\n    font-size: 10px;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Noto Sans KR', sans-serif;\n  }\n\n  #root,\n  body {\n    width: 100vw;\n    height: 100vh;\n  }\n`;\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <ThemeProvider theme={{}}>\n    <>\n      <GlobalStyle />\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/single\" exact={true} component={SingleMode} />\n          <Route path=\"/\" component={Landing} />\n        </Switch>\n      </Router>\n    </>\n  </ThemeProvider>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}